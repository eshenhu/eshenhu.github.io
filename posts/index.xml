<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on shengli&#39;s blog</title>
    <link>https://eshenhu.github.io/posts/</link>
    <description>Recent content in Posts on shengli&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Tue, 03 Nov 2020 21:46:58 +0000</lastBuildDate><atom:link href="https://eshenhu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write first citizen function code in C</title>
      <link>https://eshenhu.github.io/posts/write-first-citizen-function-in-c/</link>
      <pubDate>Tue, 03 Nov 2020 21:46:58 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/write-first-citizen-function-in-c/</guid>
      <description>Motivation In the last post, we talk about the function options coding style with C++ and Golang samples. Several days ago, one of my colleagues come to me talking about how to make it in the C with more intuitive way.</description>
    </item>
    
    <item>
      <title>Init object with functional options</title>
      <link>https://eshenhu.github.io/posts/init-object-with-functional-options/</link>
      <pubDate>Sat, 03 Oct 2020 21:46:58 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/init-object-with-functional-options/</guid>
      <description>Motivation During the coding, we often need to make some configuration on &amp;ldquo;object&amp;rdquo; or &amp;ldquo;entity&amp;rdquo;. In Golang&amp;rsquo;s world, the following example:</description>
    </item>
    
    <item>
      <title>eTrice (A open source ROOM framework for simplify your work)</title>
      <link>https://eshenhu.github.io/posts/etrice/</link>
      <pubDate>Tue, 20 Aug 2019 11:30:28 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/etrice/</guid>
      <description>Motivation The well known event-drive message framework such as libevent, libuv, was wide used on many open source project, such like node-js, but the drawback is</description>
    </item>
    
    <item>
      <title>Golang-race-condition-detection-result-will-not-happene-always</title>
      <link>https://eshenhu.github.io/posts/golang-race-condition-detection-result-will-not-happene-always/</link>
      <pubDate>Mon, 18 Feb 2019 21:49:35 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/golang-race-condition-detection-result-will-not-happene-always/</guid>
      <description>[TOC]
Dave Cheney post a quiz on his blog several years ago,
code
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) type RPC struct { result int done chan struct{} } func (rpc *RPC) compute() { time.</description>
    </item>
    
    <item>
      <title>SMEM,SMD,SMSM 1/3</title>
      <link>https://eshenhu.github.io/posts/smem-smd-smsm-1-3/</link>
      <pubDate>Wed, 05 Dec 2018 22:58:04 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/smem-smd-smsm-1-3/</guid>
      <description>SMEM,SMD,SMSM (1/3) Recent half of year, I made development on Qualcomm platform FSM990x, which is ARM A7 based, same core with Mobile phone a few years ago, but equipped with more powerful DSP and FPGA capability for special purpose.</description>
    </item>
    
    <item>
      <title>Drgon ball release their code to explain the reason, cool</title>
      <link>https://eshenhu.github.io/posts/drgon-ball-release-their-code-to-explain-the-reason-cool/</link>
      <pubDate>Thu, 01 Nov 2018 23:17:32 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/drgon-ball-release-their-code-to-explain-the-reason-cool/</guid>
      <description>Today, I was surffing the web and saw a very interesting story about the players suspected the Drogon Ball game maker cheat on the game here and here</description>
    </item>
    
    <item>
      <title>Write a HW based periodic timer framework</title>
      <link>https://eshenhu.github.io/posts/write-a-hw-based-periodic-timer-framework/</link>
      <pubDate>Sun, 12 Aug 2018 16:12:00 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/write-a-hw-based-periodic-timer-framework/</guid>
      <description>Introduction Linux kernel provided good readable timer operations in the code. ref timer
Some attributes of system timer in the kernel are:</description>
    </item>
    
    <item>
      <title>Use DPDK to accelerate LTE networks</title>
      <link>https://eshenhu.github.io/posts/use-dpdk-to-accelerate-lte-networks/</link>
      <pubDate>Tue, 22 May 2018 18:51:28 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/use-dpdk-to-accelerate-lte-networks/</guid>
      <description>Along with the revolution of FlexRAN, the Tele was required to provide more flexible services to the customers. One of them is Tele want to provide more customsize services to the paticular users, such like Oil, Medical etc manufacture industries, who want intergrate more industried services within some fixed area.</description>
    </item>
    
    <item>
      <title>build lightweight network monitor tools</title>
      <link>https://eshenhu.github.io/posts/build-lightweight-network-monitor-tools/</link>
      <pubDate>Wed, 16 May 2018 23:14:19 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/build-lightweight-network-monitor-tools/</guid>
      <description>Motivation Recently my project need a lightweight network monitor tools to peek at the network activity, some basic requirements was list as following:</description>
    </item>
    
    <item>
      <title>Build your private LTE network for IIOT</title>
      <link>https://eshenhu.github.io/posts/build-your-private-lte-network-for-iiot/</link>
      <pubDate>Thu, 28 Dec 2017 17:15:55 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/build-your-private-lte-network-for-iiot/</guid>
      <description>Abstract:
 In some specfied conditions, the tele operator is considering share/reserve some spectrum resource to the IIOT(Industry IoT)applicance, like the NB-IoT/eMTC tech defined by 3GPP stardard.</description>
    </item>
    
    <item>
      <title>Build service with SOA in Openwrt</title>
      <link>https://eshenhu.github.io/posts/build-service-with-soa-in-openwrt/</link>
      <pubDate>Wed, 22 Nov 2017 18:51:28 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/build-service-with-soa-in-openwrt/</guid>
      <description>In one of internal technical review meeting, the coder integrate the service into a existed substance/service, but considering of the scalability of this service, I strongly recommended the developer decouple this service from any substance and made them into a self-contained substance in order to provide the service to more clients in the future.</description>
    </item>
    
    <item>
      <title>Design a license system in embedded system</title>
      <link>https://eshenhu.github.io/posts/design-a-license-system-in-embedded-system/</link>
      <pubDate>Thu, 02 Nov 2017 18:14:55 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/design-a-license-system-in-embedded-system/</guid>
      <description>License was widely used on many software/hardware area, such as Microsoft Windows Series, which use dedicated hardware to store their key and other information to verify the booting OS is legal or not.</description>
    </item>
    
    <item>
      <title>Fast logging system in embedded system</title>
      <link>https://eshenhu.github.io/posts/fast-logging-system-in-embedded-system/</link>
      <pubDate>Mon, 23 Oct 2017 21:04:42 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/fast-logging-system-in-embedded-system/</guid>
      <description>Fast logging system in embedded system  [TOC]
Introduction FLOG is a light-weight logging system which has features like, high throughput, non-blocking and lock-less write from different process, crash save in field.</description>
    </item>
    
    <item>
      <title>system test thoughts</title>
      <link>https://eshenhu.github.io/posts/system-test-thoughts/</link>
      <pubDate>Wed, 16 Aug 2017 23:33:10 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/system-test-thoughts/</guid>
      <description>谈谈如何有效的测量系统负载和响应 嵌入式系统在系统测试过程中往往需要进行 Stability, Robustness, Accessbility, Responsibility 等等系统测试. 以来保证系统的功能完整性和健壮性.
嵌入式系统在设计在立项阶段会给出一个设计目标, 比如一款路由器，往往会给出以下类似的要求:
 支持 802.11n/g/a/b 支持. 支持 2.4G, 5G 双频. 最大速率支持 (450Mbps). &amp;hellip;  作为系统设计者,需要在设计阶段锚定这些目标进行技术选型.</description>
    </item>
    
    <item>
      <title>Some thoughts about memory issue</title>
      <link>https://eshenhu.github.io/posts/some-thoughts-about-memory-issue/</link>
      <pubDate>Mon, 26 Jun 2017 22:27:24 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/some-thoughts-about-memory-issue/</guid>
      <description>最近一段时间在忙于内存问题的事情，算是有些成果输出吧。借机谈论一下自己的感想。
近来工程团队遇到几次比较严重的内存泄漏问题,有一些问题无疾而终.在接手工作后发现这些问题均是发生 在客户的现场,很难在实验室复现. 即使能够在长时间stability测试发现问题，因为现场发生比较遥远， 也是很难去定位问题. 针对此类问题,团队近期输出了几个内部产品, 较好的解决了其中的一些问题。
项目团队在 Devops team 的协助下已经有一套比较完备的测试工具, 单元测试，valgrind内存检查. 但是在集成测试阶段还是缺乏手段去快速定位内存问题。针对此类问题
 工程团队重构了自定义的内存分配器，加入了头尾两部分的magic number, FREE() 内存后reset 内存单元内容. 在每次 ALLOC()/FREE() 强制检查合法性, 第一时间保留现场.</description>
    </item>
    
    <item>
      <title>Efficient data transfer through zero copy</title>
      <link>https://eshenhu.github.io/posts/efficient-data-transfer-through-zero-copy/</link>
      <pubDate>Mon, 05 Jun 2017 00:21:11 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/efficient-data-transfer-through-zero-copy/</guid>
      <description>Zero-copy I/O practice in project Recently weeks, I was working on how to exploit the potentialities with the GMAC(1G Ethernet Media Access Controller) on the SoC in my desktop.</description>
    </item>
    
    <item>
      <title>don&#39;t use memset() init your struct</title>
      <link>https://eshenhu.github.io/posts/don-t-use-memset-init-your-struct/</link>
      <pubDate>Sun, 04 Jun 2017 22:17:59 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/don-t-use-memset-init-your-struct/</guid>
      <description>Don&amp;rsquo;t use memset init your struct Even in some open source project, we always see memset filled in the code, here I had like give the reason why we should not use memset if possible.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://eshenhu.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://eshenhu.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://eshenhu.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.</description>
    </item>
    
  </channel>
</rss>
